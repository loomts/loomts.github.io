[{"categories":null,"content":" 前段时间白嫖了一个 域名 ，暑假有时间了赶紧物尽其用，于是花了一天的时间重新建了个站（其实我很久之前就用过hexo无脑建站，但最近发现了一个特别喜欢的Hugo主题 MemE ）。\n 简略步骤 Hugo 配置  先在 wsl 下装 Hugo  1  sudo apt install hugo   然后用 tldr 看一下 Hugo 的基础命令  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  loomt@loomt:~/blog/loomt$ tldr hugo hugo Template-based static site generator. Uses modules, components, and themes.More information: https://gohugo.io. - Create a new Hugo site: hugo new site {{path/to/site}} - Create a new Hugo theme (themes may also be downloaded from https://themes.gohugo.io/): hugo new theme {{theme_name}} - Create a new page: hugo new {{section_name}}/{{filename}} - Build a site to the ./public/ directory: hugo - Build a site including pages that are marked as a \"draft\": hugo --buildDrafts - Build a site to a given directory: hugo --destination {{path/to/destination}} - Build a site, start up a webserver to serve it, and automatically reload when pages are edited: hugo server   新建站点并配置主题  1 2 3 4 5  hugo new site loomt # 随便起一个名字 cd loomt git init git submodule add https://github.com/reuixiy/hugo-theme-meme.git themes/meme # 将皮肤作为submodule添加，以便更新 rm config.toml \u0026\u0026 cp themes/meme/config-examples/en/config.toml config.toml #覆盖配置文件   发布文章  1  hugo new posts/first_post.md #可以在此路径下编辑文章   运行本地服务  1  hugo server -D # 在本地服务器运行 -D是渲染草稿   现在已经完成基本配置，可以访问运行在本机的站点了。还可以根据 Hugo 官方以及使用的皮肤作者提供的文档进行个性化的配置。\n 配置的时候有一个需要注意的地方是 config.toml 的 baseURL 要加 https:// ，否则生成的静态页面 css 和 js 加载会出问题。\n 部署到 Github Page Hugo 是一个网站构建工具，生成的 public 文件夹存放的是静态的部署页面，我们需要将其放在 Github Page 中。建议开两个仓库，一个仓库用于存放根目录，另一个用于存放./public 文件夹的内容，以便被 Github Page 部署。\n 因为根目录可能有敏感信息或者暂时不希望公开的草稿，为了让其得到有效的版本控制，建议开一个私有仓库存放\n而 publishDir(./pubic) 作为输出的静态页面，则适合放在公开的仓库 Github Page 不公开没法白嫖\n 默认看到这里的同学已经建好了仓库，并完成了仓库的初始化和配置🤗。 下面假设更新了文章，需要同步到两个仓库。\n1 2 3 4 5 6 7 8  hugo --gc --cleanDestinationDir # 生成静态站点到./public的同时 清除缓存和静态站点用不着的文件 git add . git commit -m \"update source code\" git push cd public git add . git commit -m \"update Github Page\" git push   还可以加个 Github Workflow，简化步骤，具体可阅读 GitHub Actions 官方文档，actions-gh-pages 以及 reuixiy 的博客 。\n自动化方案  如果源码仓库和 Github Page 仓库都是公有的话可以阅读 actions-gh-pages 进行简单的配置。 如果源码仓库是私有的，Github Page 仓库是公开的话，可以参考以下配置方案。   配置公钥和私钥到仓库  需要生成 SSH key pair 以获取源码仓库对 Github Page 仓库修改的权限。\nssh-keygen -t rsa -b 4096 -C \"yourname@users.noreply.github.com\" # 注意：不要无脑回车，最好开一个文件夹存公钥私钥，不然会覆盖掉以前的  id_rsa（私钥）  前往Github Page仓库，Settings \u003e Deploy Keys \u003e Add deploy key。\n需要勾选 Allow write access。\n id_rsa.pub （公钥）  前往源码仓库，Settings \u003e Secrets \u003e Actions \u003e New repository secret。\nName 需要设为 ACTIONS_DEPLOY_KEY\n新建 Workflow 配置文件  下面粘一下我的配置方案\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  # .github/workflows/build.ymlname:Hugo automated deploymenton:push:branches:- main # Set a branch name to trigger deploymentjobs:deploy:runs-on:ubuntu-latestpermissions:contents:writeconcurrency:group:${{ github.workflow }}-${{ github.ref }}steps:- uses:actions/checkout@v3with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'0.92.2'- name:Buildrun:hugo --minify# - name: Deploy# uses: peaceiris/actions-gh-pages@v3# # If you're changing the branch from main, # # also change the `main` in `refs/heads/main` # # below accordingly.# if: ${{ github.ref == 'refs/heads/main' }}# with:# github_token: ${{ secrets.GITHUB_TOKEN }}# publish_dir: ./public- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}external_repository:loomts/loomts.github.io# your Github Page repositorypublish_branch: main # default:gh-pagespublish_dir:./public  推送到 Github  1 2 3  git add . git commit -m \"setup auto deploy\" git push   打开你的源码仓库页面，点击 Actions 查看日志。\nGithub Page 绑定自定义域名 假设已经有了域名，现在需要在域名的 DNS 服务商那里加一个 CNAME （用于 dns 跳转）\n   name type value     www CNAME loomts.github.io    一段时间后，回到 Github Page 仓库，在 Settings \u003e Pages \u003e Custom domain 处填上自己的域名，等待几小时生成证书，然后勾选 Enforce HTTPS。\n还要记得添加 your domain 到 static/CNAME ，以生成到静态文件。\n Custom domains are stored in a CNAME file in the root of your publishing source. You can add or update this file through your repository settings or manually. For more information, see \" Managing a custom domain for your GitHub Pages site .\" ——Github Docs\n Vercel Vercel 可以看作是一个结合了 Github Page 还有 Github Actions 的用于前端框架和静态站点管理的平台，直接导入仓库即可部署，也可以和 Github Page 结合使用。需要注意的是注册域名的时候要去域名注册商改一下 DNS 服务器。\n总结 目前我在用 Vercel 托管 https://loomt.eu.org ，顺便将 Github Page 绑定了这个白嫖的域名，感觉非常不戳。 个人感觉 Vercel 的体验要比 Github Page 略好一点，但是需要有一个自己的域名。\nreference\nhttps://gohugo.io/getting-started/\nhttps://blog.aozaki.cc/blog/hugo-deployment-debugging\nhttps://io-oi.me/tech/hugo-vs-hexo/\nhttps://github.com/MunifTanjim/minimo/issues/189\nhttps://zenlian.github.io/posts/tools/github-actions-hugo/\nhttps://github.com/peaceiris/actions-gh-pages\n","description":"","tags":null,"title":"建站","uri":"loomt.eu.org/posts/%E5%BB%BA%E7%AB%99/"}]